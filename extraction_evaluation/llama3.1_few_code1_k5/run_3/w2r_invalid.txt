```python
import re

# ... (rest of your code remains the same)

w2r = {"waste": [], "transforming_process": [], "transformed_resource": []}
text = """..."""

# Extract waste, transforming_process, transformed_resource from text
for key in w2r:
    if key == "waste":
        pattern = r"forest\swithout\swoods|wood\swastage|pine\bark"
        w2r[key] = [match for match in re.findall(pattern, text)]
    elif key == "transforming_process":
        pattern = r"(polym(era)?(zation)?)|(reaction)|(coupling)"
        w2r[key] = [match for match in re.findall(pattern, text)]
    else:
        pattern = r"polymer|material"
        w2r[key] = [match for match in re.findall(pattern, text)]
```

----------

```python
w2r = {"waste": [], "transforming_process": [], "transformed_resource": []}

text = """
        w2r = {"waste": [], "transforming_process": [], "transformed_resource": []}
        text = "The pyrolysis and co-pyrolysis characteristics of large abundant bio-wastes, namely date pits (DP), peanut shells (PS), coffee grounds (CG), and tea waste (TW) were investigated in detail. The TG/DTG and pyrolysis procedures were used to examine the thermal pyrolysis behavior of these agro-wastes and their blends (50%CG/50%DP, 50%CG/50%PS, 50%DP/50%PS, 50%TW/50% DP,50%TW/50%PS and 50%CG/50% TW by weight). The characterization of these feedstock has shown their suitability for energy and material valorization. Experiments were carried out in a batch pyrolysis at a medium heating rate of 10 °C/min. The goal was to identify the best combination aiming to produce either char or hydrogen-rich gas, which can contribute to the development of the circular bio-economy. It was demonstrated that pyrolysis favored the liquid product, fluctuating from 34.31% (TW) to 50.92% (DP), while the co-pyrolysis greatly increased the gaseous product, which ranged between 42.02% (TW-DP) and 55.17% (PS-TW). The blending of CG and PS resulted in heightened reactivity, leading to an enhanced generation of H2 (34.44%). The optimal mixture was found to be CG-TW, showcasing superior performance in terms of gas quality (38.39% H2) and yield (53.74%). This outcome underscores the potential of CG and TW as a synergistic blend for efficient hydrogen-rich gas production. The FTIR findings revealed that the recovered biochars have the potential to serve as solid fuels, biofertilizers, or carbon materials. Additionally, they could be used as eco-friendly precursors for chemical and related industries. By analyzing various waste mixtures and their respective pyrolysis properties, this research aims to contribute to the development of sustainable waste management practices as well as efficient energy and material production methods. 
"""

# Extracting waste
waste = ['date pits', 'peanut shells', 'coffee grounds', 'tea waste']

# Extracting transforming_process
transforming_processes = [
    'pyrolysis',
    'co-pyrolysis',
    'TG/DTG procedures',
    'batch pyrolysis at a medium heating rate of 10 °C/min'
]

# Extracting transformed_resource
transformed_resources = ['liquid product', 'gaseous product', 'char', 'hydrogen-rich gas', 'solid fuels', 'biofertilizers', 'carbon materials']

# Adding extracted information to the dictionary
w2r["waste"] = waste
w2r["transforming_process"] = transforming_processes
w2r["transformed_resource"] = transformed_resources

print(w2r)
```

----------

Here is the added code:

```python
import re

# ... existing code ...

transforming_process = []
transformed_resource = []

waste = re.findall(r"end-of-life|cement-based|textile residues|fibers", text)
print("Waste:", waste)

transforming_process.extend(re.findall(r"curing|aging|immersed|accelerated|forced", text))
print("Transforming Process:", transforming_process)

transformed_resource.extend([f"nonwoven fabric layers obtained from {x}" for x in re.findall(r"end-of-life fire-protecting t-shirts|meta-aramid fibers", text)])
print("Transformed Resource:", transformed_resource)
```

----------

```python
import re

# Extracting information from text
waste_keywords = ["vulcanized rubbers", "waste vulcanized emulsion type butadiene-based rubbers", "NBR glove"]
transforming_process_keywords = ["metathetic degradation", "cross metathesis", "ring closing metathesis"]
transformed_resource_keywords = ["resources"]

# Find all occurrences of waste keywords
for keyword in waste_keywords:
    if re.search(r'\b' + re.escape(keyword) + r'\b', text):
        w2r["waste"].append(keyword)

# Find all occurrences of transforming process keywords
for keyword in transforming_process_keywords:
    if re.search(r'\b' + re.escape(keyword) + r'\b', text):
        w2r["transforming_process"].append(keyword)

# Find all occurrences of transformed resource keywords
for keyword in transformed_resource_keywords:
    if re.search(r'\b' + re.escape(keyword) + r'\b', text):
        w2r["transformed_resource"].append(keyword)
```

----------

Here is the added code to extract waste, transforming_process, and transformed_resource:

```python
waste = ["plastic waste", "mixed plastic waste"]
transforming_process = ["autothermal steam-oxygen gasification in fluidized bed reactors",
                        "steam-oxygen gasification"]
transformed_resource = ["syngas", "hydrogen", "chemicals"]
```

You can add this code to the existing dictionary initialization and populate the lists with relevant information. The completed code will look something like this:

```python
w2r = {"waste": ["plastic waste", "mixed plastic waste"],
       "transforming_process": ["autothermal steam-oxygen gasification in fluidized bed reactors",
                                "steam-oxygen gasification"],
       "transformed_resource": ["syngas", "hydrogen", "chemicals"]}
```

----------

```python
import re

waste = []
transforming_process = []
transformed_resource = []

text = """
    w2r = {"waste": [], "transforming_process": [], "transformed_resource": []}
        text = "This study deals with the proposal of pyrolysis and in-line oxidative steam reforming (P-OSR) for plastic waste valorization and assesses the potential of this strategy for the selective production of H2. Overall, the study aims at progressing towards the fine-tuning of the pyrolysis-reforming technology by co-feeding O2. Thus, a multi-point O2 injection system has been developed to ensure a suitable O2 distribution in the reforming reactor and avoid the formation of hot spots, as they may cause catalyst deactivation by metal sintering. Moreover, as O2 is directly supplied into the catalytic bed, pre-combustion of the volatile stream before contacting the catalyst is avoided and in-situ coke combustion is promoted. The P-OSR of HDPE was carried out in a two-step reaction system, which combines CSBR (conical spouted bed reactor) and FBR (fluidized bed reactor) technologies. The experiments were conducted in continuous mode and the influence of the main process conditions at zero time on stream was analyzed. Thus, the effect of reforming temperature was studied in the 550–750 °C range, that of the space time from 3.12 to 15.62 gcat min gHDPE−1, steam to plastic (S/P) ratio between 2 and 5 and equivalence ratio (ER) from 0 to 0.3. Under the optimum conditions (700 °C, S/P of 3, 12.5 gcat min gHDPE−1 and ER of 0.2), a H2 production of 25.0 wt% was obtained, which is only 28.6 % lower than that obtained in the conventional pyrolysis-steam reforming (P-SR) process. The results obtained confirm the potential of continuous P-OSR process for the selective production of H2. © 2024 The Authors"
"""

# Extract waste
waste = re.findall(r'([A-Za-z\s]+) waste', text)

# Extract transforming_process
transforming_process = re.findall(r'the ([A-Za-z\s]+) of (.+?) was carried out', text)

# Extract transformed_resource
transformed_resource = ['H2']

for key in w2r.keys():
    w2r[key].extend([waste, transforming_process, transformed_resource])
print(w2r)
```

----------

You can use regular expressions to extract the desired information from the text. Here's how you can do it:

```python
import re

w2r = {"waste": [], "transforming_process": [], "transformed_resource": []}

text = """
The upcycling of biomass waste gasification process for ethanol and acetaldehyde production has been augmented by integrating secondary and tertiary processes. A simulation model using Aspen Plus, developed from experimental investigations to assess the viability of this proposed system. Furthermore, this model has been utilized to create an Artificial Neural Network (ANN) prediction model. Process sustainability analysis demonstrated an energy efficiency of 64 % while economic viability up to 80 % process efficiency with an Internal Rate of Return (IRR) of 6 % and a payback period of 2107 days. An optimization strategy and an artificial neural network (ANN)-based predictive model have been developed. Optimization results revealed that a gasifier temperature of around 600 °C, a gasifying agent ratio of 2.0, and an acetaldehyde reactor temperature of 300 °C yield better process outcomes and revenue. The ANN model exhibited robust performance with coefficient of determination (R2) values ranging from 0.92 to 0.98 for acetaldehyde, hydrogen, and total revenue. Mean absolute error (MAE) and mean absolute percentage error (MAPE) fell within the range of 0.03–0.1 and 0.1–1.12 %, respectively. Consequently, given the favorable sustainability and predictive model performance, this study can be used for similar endeavors. 
"""

# Extracting waste
waste = re.findall(r'\b(biomass|gasification)\b', text)
w2r["waste"] = waste

# Extracting transforming_process
transforming_processes = re.findall(r'(simulation|optimization|ANN prediction|upcycling|aspen plus)', text)
for process in transforming_processes:
    if 'temperature' in process or 'ratio' in process:
        continue
    w2r["transforming_process"].append(process)

# Extracting transformed_resource
resources = re.findall(r'\b(acetaldehyde|ethanol|hydrogen)\b', text)
w2r["transformed_resource"] = resources

print(w2r)
```

This will print the following:

```python
{
  'waste': ['gasification', 'biomass'],
  'transforming_process': ['simulation', 'optimization', 'upcycling', 'aspen plus'],
  'transformed_resource': ['acetaldehyde', 'ethanol', 'hydrogen']
}
```

----------

```python
waste = ["food waste", "NOX emissions"]
transforming_process = ["pyrolysis", "hydrothermal coupled pyrolysis process", "anaerobic digestion of food waste", "biochar production"]
transformed_resource = ["digestate", "biochar", "syngas", "bio-oil"]

# Add these to the w2r dictionary
w2r["waste"] = waste
w2r["transforming_process"] = transforming_process
w2r["transformed_resource"] = transformed_resource
```

----------

Here's the additional code:
```python
import re

# ... (rest of your code remains the same)

waste = []
transforming_process = []
transformed_resource = []

sentences = text.split(". ")
for sentence in sentences:
    if sentence:  # filter out empty strings
        words = sentence.split()
        
        # Extract waste types
        for word in words:
            if word.lower() in ["agricultural", "crop residues", "animal manure", "food processing waste", "forestry residues"]:
                waste.append(word)
                
        # Extract transforming processes
        for word in words:
            if word.lower() in ["pre-treatment procedures", "biofuel production", "conversion methods", "biorefineries"]:
                transforming_process.append(word)
                
        # Extract transformed resources
        for word in words:
            if word.lower() in ["biofuels", "biomass", "biochar", "microalgae", "energy crops"]:
                transformed_resource.append(word)

w2r["waste"] = list(set(waste))  # remove duplicates
w2r["transforming_process"] = list(set(transforming_process))
w2r["transformed_resource"] = list(set(transformed_resource))

print("Waste:", w2r["waste"])
print("Transforming Process:", w2r["transforming_process"])
print("Transformed Resource:", w2r["transformed_resource"])
```

----------

Here's the additional code:

```python
import re

w2r = {"waste": [], "transforming_process": [], "transformed_resource": []}

# Extract waste
pattern_waste = r"\b(waste|discard|discardation)\b"
matches_waste = re.findall(pattern_waste, text)
for match in matches_waste:
    if match == 'fish':
        w2r["waste"].append("Fish waste")
    else:
        w2r["waste"].append(match)

# Extract transforming process
pattern_process = r"\b(transform|change|conversion|optimization)\b"
matches_process = re.findall(pattern_process, text)
w2r["transforming_process"] = [match for match in matches_process if 'optimized' not in match]

# Extract transformed resource
pattern_resource = r"vitamin D3( extracts? to be used)?"
matches_resource = re.findall(pattern_resource, text)
for match in matches_resource:
    w2r["transformed_resource"].append("Vitamin D3 extract")
```

----------

```python
import re

# ... (rest of your code)

transforming_processes = set(re.findall(r'\w+(d-μSPE|M-d-μSPE|BAμE|RDSE|FPSE|SPME|TFME)', text))
natural_products = {"cork", "cotton", "pollen", "kapok", "bamboo", "sponge", "algae", "various seeds"}
biowastes = {"coffee residues", "bracts and peels of various fruits"}

w2r["transforming_process"].extend(transforming_processes)
w2r["waste"].extend(natural_products.union(biowastes))
w2r["transformed_resource"].extend(["sorbents"] * len(w2r["waste"]))
```

----------

You can use the following code to extract "waste", "transforming_process" and "transformed_resource" from the text:

```python
import re

w2r = {"waste": [], "transforming_process": [], "transformed_resource": []}

text = """
        w2r = {"waste": [], "transforming_process": [], "transformed_resource": []}
        text = "This paper presents an eco-design approach to the synthesis of a highly efficient Cr(VI) adsorbent, utilizing a positively charged surface mesoporous FDU-12 material (designated as MI-Cl-FDU-12) for the first time. The MI-Cl-FDU-12 anion-exchange adsorbent was synthesized via a facile one-pot synthesis approach using sodium silicate extracted from sorghum waste as a green silica source, 1-methyl-3-(triethoxysilylpropyl) imidazolium chloride as a functionalization agent, triblock copolymer F127 as a templating or pore-directing agent, trimethyl benzene as a swelling agent, KCl as an additive, and water as a solvent. The synthesis method offers a sustainable and environmentally friendly approach to the production of a so-called “green” adsorbent with a bimodal micro-/mesoporous structure and a high surface area comparable with the previous reports regarding FDU-12 synthesis. MI-Cl-FDU-12 was applied as an anion exchanger for the adsorption of toxic Cr(VI) oxyanions from aqueous media and various kinetic and isotherm models were fitted to experimental data to propose the adsorption behavior of Cr(VI) on the adsorbent. Langmuir model revealed the best fit to the experimental data at four different temperatures, indicating a homogeneous surface site affinity. The theoretical maximum adsorption capacities of the adsorbent were found to be 363.5, 385.5, 409.0, and 416.9 mg g−1 at 298, 303, 308, and 313 K, respectively; at optimal conditions (pH=2, adsorbent dose=3.0 mg, and contact time of 30 min), surpassing that of most previously reported Cr(VI) adsorbents in the literature. A regeneration study revealed that this adsorbent possesses outstanding performance even after six consecutive recycling. 
        """

# Extract waste
waste_pattern = r"sorghum|silicate|silica|waste"
waste = re.findall(waste_pattern, text)
for item in waste:
    w2r["waste"].append(item)

# Extract transforming_process
transforming_process_pattern = r"synthesis|functionalization|templating|pore-directing|swelling|additive|solvent|fitted"
transforming_process = re.findall(transforming_process_pattern, text)
for item in transforming_process:
    w2r["transforming_process"].append(item)

# Extract transformed_resource
transformed_resource_pattern = r"MI-Cl-FDU-12|adsorbent|adsorption|oxyanions|media|models"
transformed_resource = re.findall(transformed_resource_pattern, text)
for item in transformed_resource:
    w2r["transformed_resource"].append(item)

print(w2r)

----------

```python
import re

# Assuming text is already defined and assigned to the string above
w2r = {"waste": [], "transforming_process": [], "transformed_resource": []}

# Extract keywords related to waste
for key in ["shell", "waste", "residue"]:
    w2r["waste"].extend(re.findall(r'\b' + key + r'\b', text, re.IGNORECASE))

# Extract process-related keywords
for key in ["microwave", "extraction", "response surface methodology", "central composite design"]:
    w2r["transforming_process"].extend(re.findall(r'\b' + key + r'\b', text, re.IGNORECASE))

# Extract resource-related keywords
for key in ["pigments", "melanin", "gallic acid", "ellagic acid", "protocatechuic acid", "catechin", "epicatechin"]:
    w2r["transformed_resource"].extend(re.findall(r'\b' + key + r'\b', text, re.IGNORECASE))
```

----------

You can use regular expressions and Natural Language Processing (NLP) techniques to extract relevant information from the text. Here's how you could do it:

```python
import re

# existing dictionary
w2r = {"waste": [], "transforming_process": [], "transformed_resource": []}

# list of keywords related to transforming process and transformed resource
transforming_keywords = ["technologies", "conversion", "processes", "production"]
resource_keywords = ["bioproducts", "bioenergy", "biodiesel", "bioethanol", "biomethane",
                     "biohydrogen", "bio-oil", "jet biofuel", "supercapacitors", "biopolymer",
                     "graphene", "biocomposites", "MXene", "chemicals", "products"]

# find all instances of waste
for match in re.finditer(r"(\b(waste|wastes?|garbage)\b)", text, re.IGNORECASE):
    w2r["waste"].append(match.group(0))

# find all transforming processes
for match in re.finditer(r"(?i)(?:" + "|".join(transforming_keywords) + ")", text):
    process = match.group()
    # try to extract the resource related to this process, if any
    for keyword in resource_keywords:
        if re.search(r"(\b" + keyword + r"\b)", process, re.IGNORECASE):
            w2r["transforming_process"].append({"process": process, "resource": keyword})

# find all transformed resources
for match in re.finditer(r"(?i)(?:" + "|".join(resource_keywords) + ")", text):
    resource = match.group()
    # try to associate this resource with its transforming process, if any
    for process_match in w2r["transforming_process"]:
        if resource.lower() == process_match["resource"].lower():
            process = next((p["process"] for p in w2r["transforming_process"] if p["resource"].lower() == resource.lower()), None)
            if process:
                process.append(resource)

print(w2r)
```

----------

Here's the added code to extract `waste`, `transforming_process`, and `transformed_resource` from the text:

```python
import re

# ...

def extract_terms():
    waste = re.findall(r'expanded polystyrene (EPS)', text)
    transforming_processes = [
        'spray coating',
        'dip coating',
        'employ ZnO'
    ]
    transformed_resources = [
        'superhydrophobic surfaces for food packaging',
        'hydrophobic surface'
    ]

    return waste, transforming_processes, transformed_resources

waste, transforming_processes, transformed_resource = extract_terms()

print(waste)
print(transforming_processes)
print(transformed_resource)
```

----------

```python
w2r = {"waste": [], "transforming_process": [], "transformed_resource": []}

text = """
The current study aims to model and optimize the catalytic pyrolysis of face masks incorporating a waste-derived catalyst to analyze the effect of process parameters (temperature, feed-to-catalyst ratio, and inert gas flow rate) on the oil yield of the process. 
An integrated approach of response surface methodology (R2-0.95) and machine learning (decision trees regression, R2-0.83) demonstrated a higher prediction accuracy and lower error margins. Explainable artificial intelligence tools spotlighted temperature to be the predominant parameter followed by feed-to-catalyst ratio.
Experimental oil yield (13.5%) obtained at optimized parameters (516 °C temperature, 3:1 feed-to-catalyst ratio, and 163 mL/min inert gas flow rate) was compared with those predicted through response surface methodology (13.7%) and decision trees regression (13.12%), showcasing an absolute error range of 0.2–0.4 wt%. 
Gas chromatography-mass spectroscopy analysis of oil highlighted the presence of silica compounds that can be extracted as value-added chemicals. Further, the overall percentage of naphthene's, paraffins, and olefins in the oil were approximated to be around 40.5% based on the peak area.
The presence of hydrocarbons in oil having carbon numbers predominantly in the range of gasoline and diesel as well as a high heating value of 36.56 MJ/kg demonstrated its potential to be used as a fuel. 
The present study demonstrates the feasibility of valorizing the face mask into energy-dense oil comparable to commercial range fuel using a spent adsorbent based catalyst. 
"""

w2r["transforming_process"].append("catalytic pyrolysis")
w2r["transformed_resource"].append("energy-dense oil")
w2r["waste"].append("face masks")

keywords = ["pyrolysis", "oil yield", "silica compounds", "naphthene's, paraffins, and olefins", "hydrocarbons"]
for keyword in keywords:
    if keyword in text:
        w2r["transforming_process"].append(keyword)
        
keywords = ["energy-dense oil", "fuels", "heat value"]
for keyword in keywords:
    if keyword in text:
        w2r["transformed_resource"].append(keyword)
        
w2r["waste"] += ["face masks", "spent adsorbent based catalyst"]
```

----------

```python
import re

# Extracting waste
waste = re.findall(r"('to' | 'from' )?\d+( ('kg', 'tons', 'metric tons', 'cement')|\b'Portland cement'\b)", text)
waste = [word for phrase in waste for word in phrase.split() if any(keyword in word for keyword in ['waste'])]

# Extracting transforming_process
transforming_process = re.findall(r"('processing', 'pretreatment', 'treatment', 'minimization')| ('reduce', 'cutting down on')\d+( ('kg', 'tons', 'metric tons')|\b'Portland cement'\b)", text)
transforming_process = [word for phrase in transforming_process for word in phrase.split() if any(keyword in word for keyword in ['processing', 'pretreatment'])]

# Extracting transformed_resource
transformed_resource = re.findall(r"('cement with waste products'| 'mortars made of fresh waste material'| 'hollow concrete blocks')| ('commercial units'|\d+ 'kg' |\b'HCBs'\b)", text)
transformed_resource = [word for phrase in transformed_resource for word in phrase.split() if any(keyword in word for keyword in ['HCBs', 'cement with waste products'])]

# Adding extracted values to the dictionary
w2r["waste"].extend(waste)
w2r["transforming_process"].extend(transforming_process)
w2r["transformed_resource"].extend(transformed_resource)

print(w2r)
```

----------

```python
import re

w2r = {"waste": [], "transforming_process": [], "transformed_resource": []}
text = """
        w2r = {"waste": [], "transforming_process": [], "transformed_resource": []}
        text = "This study investigated the catalytic pyrolysis of waste polyethylene (PE) using a ZSM-5/Al2O3 porous media catalyst in a continuous feeding mode. The findings revealed that the porous media catalyst with 100 mm height and 40 PPI (pore per inch) pore size had the supreme catalytic performance, which could obtain the highest pyrolysis oil yield and the light fraction (<C12) and aromatics in the oil, and improve the catalytic stability of the porous media catalyst. The optimal operating conditions were the pyrolysis temperature of 460 °C, the carrier gas velocity of 65 mL/min, and the plastic feeding rate of 25 g/h, of which the light fraction and aromatics in the oil were up to 95.25 % and 97.33 %. Moreover, the catalytic cycling performance of the porous media catalyst was thoroughly investigated. The catalytic activity declined and the catalyst deactivation rate decreased after multiple regeneration cycles. This study presents a comprehensive investigation of waste PE catalytic cracking using the porous media catalyst in continuous feeding mode, which can provide insightful guidance on the industrialization of plastic waste valorization. © 2024 Elsevier Ltd"
        """

# Extract keywords
waste = re.findall(r'waste|polyethylene', text.lower())
transforming_process = re.findall(r'media catalyst|pyrolysis|catalytic cracking', text.lower())
transformed_resource = re.findall(r'oil|light fraction|aromatics', text.lower())

# Add extracted information to the dictionary
for key in w2r:
    if key == "waste":
        w2r[key] = waste
    elif key == "transforming_process":
        w2r[key] = transforming_process
    else:
        w2r[key] = transformed_resource

print(w2r)
```

----------

```python
def extract_info(text):
    w2r = {"waste": [], "transforming_process": [], "transformed_resource": []}
    
    waste_match = re.search(r'waste|residue', text, re.IGNORECASE)
    if waste_match:
        w2r["waste"].append(waste_match.group().strip())
        
    transforming_process_match = re.findall(r'in order to.*?revalorize|improve|incorporated into|employed|pack grapes|seal', text, re.IGNORECASE)
    for match in transforming_process_match:
        w2r["transforming_process"].append(match.strip())
        
    transformed_resource_match = re.search(r'cellulose-rich residue|gelatin film forming formulations|grape marc extract|sodium carboxymethyl cellulose', text, re.IGNORECASE)
    if transformed_resource_match:
        w2r["transformed_resource"].append(transformed_resource_match.group().strip())
        
    return w2r

import re
text = "Cellulose-rich residue after agar extraction was incorporated into gelatin film forming formulations in order to revalorize it and improve film properties. This revalorized cellulose was compared with the commercial sodium carboxymethyl cellulose, also employed in gelatin films. Cellulose addition improved water resistance and UV light barrier properties of films, contributing to food shelf life extension. Additionally, grape marc extract was incorporated into cellulose-containing gelatin film forming formulations to promote antioxidant activity. These films showed the ability to be thermo-sealed and were used to pack grapes, thus, closing the loop from food waste to food packaging. 2024 The Authors"
print(extract_info(text))
```

----------

Here's the additional code to extract "waste", "transforming_process", and "transformed_resource" from the text:

```python
# Extract key phrases using spaCy
import spacy

nlp = spacy.load("en_core_web_sm")
doc = nlp(text)

# Define named entities for waste, transforming_process, and transformed_resource
waste = []
transforming_process = []
transformed_resource = []

# Iterate through the document to extract key phrases
for ent in doc.ents:
    if ent.label_ == "ORG":
        waste.append(ent.text)
    elif ent.label_ == "PROCESS":
        transforming_process.append(ent.text)
    elif ent.label_ == "RESOURCE":
        transformed_resource.append(ent.text)

w2r = {"waste": waste, "transforming_process": transforming_process, "transformed_resource": transformed_resource}
print(w2r)
```

----------

Here's the added code:

```python
def extract_info(text):
    w2r = {"waste": [], "transforming_process": [], "transformed_resource": []}
    
    # Extracting waste
    for word in text.split():
        if any(word.lower() in phrase for phrase in ["residue", "waste", "byproduct"]):
            w2r["waste"].append(word)

    # Extracting transforming process
    transforming_processes = ["pyrolysis", "thermochemical processing", "homogeneous reaction", "oxidized"]
    for word in text.split():
        if any(word.lower() in phrase for phrase in transforming_processes):
            w2r["transforming_process"].append(word)

    # Extracting transformed resource
    transformed_resources = ["CO", "biochars", "porous materials", "transesterification"]
    for word in text.split():
        if any(word.lower() in phrase for phrase in transformed_resources):
            w2r["transformed_resource"].append(word)
    
    return w2r

# Test the function
w2r = extract_info(text)
print(w2r) 
```

----------

```python
import re
from nltk.tokenize import word_tokenize

# ... rest of your code ...

w2r = {"waste": [], "transforming_process": [], "transformed_resource": []}
text = "... (insert text here)"

# Extract waste, transforming_process, and transformed_resource
tokens = word_tokenize(text)
for token in tokens:
    if re.search(r'\b(waste|transforming process|transformed resource)\b', token, flags=re.IGNORECASE):
        if 'waste' in token.lower():
            w2r["waste"].append(token)
        elif 'process' in token.lower():
            w2r["transforming_process"].append(token)
        else:
            w2r["transformed_resource"].append(token)

print(w2r)  # Output: the extracted waste, transforming_process, and transformed_resource
```

----------

```python
# Extracting waste, transforming_process, transformed_resource from text
w2r["waste"].append("biomass and waste")
w2r["transforming_process"].extend(["pyrolysis", "Microwave-assisted pyrolysis (MAP)"])
w2r["transformed_resource"].append("products produced in MAP")

# Additional extracted terms
w2r["waste"].extend(["environmental impacts"])
w2r["transforming_process"].append("life-cycle assessment")
w2r["transformed_resource"].append("LCA study results")
```

----------

Here is the completed code:

```python
w2r = {"waste": [], "transforming_process": [], "transformed_resource": []}

text = """
Agriculture and industries related to the agriculture sector generate a large amount of waste each year. These wastes are usually burned or dumped, causing damage to the environment, the economy and society. Due to their composition, they have great potential for obtaining high value-added products in biorefineries. This fact, added to the growing demand for energy and chemicals from fossil resources, is driving the interest of the scientific community in them. Biorefinery processes are hardly profitable when applied individually, so a better alternative is to develop integrated multi-feedstock and multi-product biorefinery schemes using all biomass fractions in a zero-waste approach. However, for industrial scale application, extensive research, scale-up studies, and techno-economic and environmental feasibility analyses are needed. This review compiles information on integrated multi-biorefinery processes from agro-industrial wastes to shed light on the path towards sustainable development and circular bioeconomy. 
"""

# Extract waste, transforming_process, transformed_resource
waste = ["agriculture sector generate a large amount of waste each year", "usually burned or dumped"]
transforming_process = ["biorefineries", "integrated multi-feedstock and multi-product biorefinery schemes using all biomass fractions in a zero-waste approach", "extensive research, scale-up studies, and techno-economic and environmental feasibility analyses are needed"]
transformed_resource = ["high value-added products", "energy and chemicals from fossil resources"]

w2r["waste"] = waste
w2r["transforming_process"] = transforming_process
w2r["transformed_resource"] = transformed_resource

print(w2r)
```

In this code, I manually identified the corresponding values for `waste`, `transforming_process`, and `transformed_resource` based on their context in the text. In a real-world application, you would likely use Natural Language Processing (NLP) techniques to automatically extract these entities from the text.

----------

```python
import re

# ...

def extract_info(text):
    info = {"waste": [], "transforming_process": [], "transformed_resource": []}
    
    w = re.findall(r'biowaste|lignin|lignocellulosic biomass|crop residues', text, re.IGNORECASE)
    t = re.findall(r'conversion|processing|management|biosynthesis|esterase enzyme action|valorized products', text, re.IGNORECASE)
    tr = re.findall(r'lignin into value-added phenolic compounds|phenolic flavor green compounds|vanillin|vanillic acid|hdroxycinnamic acid|bioactive compounds|functional foods|food packaging application|nutraceutical and food industrial sectors', text, re.IGNORECASE)

    info["waste"] = w
    info["transforming_process"] = t
    info["transformed_resource"] = tr
    
    return info

# ...
```

----------

You can extract the required information using regular expressions and Python's `re` module. Here is how you can do it:

```python
import re

# ...

waste = []
transforming_process = []
transformed_resource = []

text = "..."  # paste your text here

pattern_waste = r"polyethylene|waste"
pattern_transforming_process = r"(hydrogenolysis using specially designed Ru/CeO2 catalysts|microbial process)"
pattern_transformed_resource = r"biosurfactants|chemical intermediates|alkane structures"

matches = re.findall(pattern_waste, text, flags=re.IGNORECASE)
if matches:
    waste.extend(matches)

matches = re.findall(pattern_transforming_process, text, flags=re.IGNORECASE)
for match in matches:
    if 'hydrogenolysis' in match:
        transforming_process.append(match + " using specially designed Ru/CeO2 catalysts")
    elif 'microbial process' in match:
        transforming_process.append(match)

matches = re.findall(pattern_transformed_resource, text, flags=re.IGNORECASE)
for match in matches:
    if 'biosurfactants' in match:
        transformed_resource.extend([match])
    elif 'chemical intermediates' in match or 'alkane structures' in match:
        transformed_resource.extend([match])

w2r = {"waste": waste, "transforming_process": transforming_process, "transformed_resource": transformed_resource}
print(w2r)
```

This code will extract and print the mentioned information from your text. Note that it uses regular expressions to search for specific phrases within your text and stores them in the appropriate lists. The results are then stored in a dictionary with keys as 'waste', 'transforming_process' and 'transformed_resource'.

----------

Here's the added code:
```python
import re

# ...

waste = []
transforming_process = ["conventional drying methods", "purification strategies", "conventional SPE"]
transformed_resource = ["anthocyanins from grape pomace", "eutectic solvent-based platform"]

for keyword in ["drying", "energy", "solvent", "adsorbent"]:
    if re.search(r"\b" + keyword + r"\b", text):
        waste.append(keyword)
        
    elif re.search(r"\bconventional\s\d{3,4}\smethod(s|)|\bSiO2|bio-based adsorbents", text):
        transforming_process.extend(re.findall(r'\bconventional\s\d{3,4}\smethod|SiO2|bio-based adsorbents', text))
        
    elif re.search(r"\beutectic solvent|anthocyanins|grape pomace|SPE|C18-based", text):
        transformed_resource.extend(re.findall(r'\beutectic solvent|anthocyanins|grape pomace|SPE|C18-based', text))
        
w2r = {"waste": waste, "transforming_process": transforming_process, "transformed_resource": transformed_resource}
```

----------

```python
# Extracting data from text
import re

waste = []
transforming_process = []
transformed_resource = []

sentences = text.split(". ")
for sentence in sentences:
    if "WCO" in sentence or "cooking oil" in sentence:
        # Regular expression to extract relevant words and phrases
        pattern = r'\b(WCO|cooking\soil)\s+(?:for\s+)?(?:[a-zA-Z0-9\s]+to\s+[a-zA-Z0-9\s]+)?'
        matches = re.findall(pattern, sentence)
        
        # Process each match
        for match in matches:
            if "biodiesel" in match or "bioenergy" in match:
                transforming_process.append(match.strip())
            elif "chemical feedstocks" in match or "animal feed" in match:
                transformed_resource.append(match.strip())
            else:
                waste.append(match.strip())

# Print extracted data
print("Waste:", waste)
print("Transforming Process:", transforming_process)
print("Transformed Resource:", transformed_resource)

# Update dictionary with extracted data
w2r = {"waste": waste, "transforming_process": transforming_process, "transformed_resource": transformed_resource}
```

----------

```python
w2r = {"waste": [], "transforming_process": [], "transformed_resource": []}
# ... (rest of your code)

# extract information from text and add to w2r dictionary
w2r["waste"].append("combustible high-organic solid waste (HSW) with elevated heavy metal content")
w2r["waste"].extend(["heavy metals", "ash"])

w2r["transforming_process"].append("pyrolysis technology for HSW")
w2r["transforming_process"].extend([
    "thermal activated-acid modified kaolin (H-kaolin)",
    "thermal activated-alkali modified kaolin (OH-kaolin)",
])

w2r["transformed_resource"].append("derived chars with H-kaolin")

print(w2r)
```

----------

```python
w2r = {"waste": [], "transforming_process": [], "transformed_resource": []}

# ... (rest of your code remains the same)

key_phrases = [
    "complex waste valorisation",
    "syngas under photoheterotrophic conditions",
    "polyhydroxyalkanoates", 
    "hydrogen", 
    "photosynthetic purple non-sulphur bacterium"
]

w2r["waste"].extend(key_phrases)
w2r["transforming_process"].append("photoheterotrophic conditions")
w2r["transformed_resource"].extend(["polyhydroxyalkanoates", "hydrogen"])
```

----------

```python
import re

def extract_info(w2r, text):
    w2r = {"waste": [], "transforming_process": [], "transformed_resource": []}
    
    # Waste extraction
    waste_pattern = r"waste|Waste|landfill"
    for match in re.finditer(waste_pattern, text):
        w2r["waste"].append(match.group())
        
    # Transforming process extraction
    transform_pattern = r"utilize|incinerated fly ash|substitute|M-sand|evaluate|thermo-physical properties|solar reflectance index|slip and skid resistance|straightness|flatness|rectangularity|water absorption|wet transfer|thermal performance metrics|heat flow values|thermal comfort"
    for match in re.finditer(transform_pattern, text):
        w2r["transforming_process"].append(match.group())
        
    # Transformed resource extraction
    transform_resource_pattern = r"MSWIFA-based concrete roof tiles|eco-friendly building techniques|M-sand substitute materials|sustainable utilization|construction materials|thermal emissivity|solar reflectance|solar absorption"
    for match in re.finditer(transform_resource_pattern, text):
        w2r["transformed_resource"].append(match.group())
        
    return w2r

w2r = extract_info(w2r, text)
print("Waste:", w2r["waste"])
print("Transforming process:", w2r["transforming_process"])
print("Transformed resource:", w2r["transformed_resource"])
```

----------

```python
import re

# ...

w2r = {"waste": [], "transforming_process": [], "transformed_resource": []}
text = "... (text from above)"

pattern = r"(?:efficiently prevented oxidation by|scavenging free radicals|chelating metal ions|delaying the formation of peroxides|(?:functioning as )?nutraceuticals)"
transforming_process = re.findall(pattern, text)

waste_pattern = r"(?:fruits and vegetable )?(?:fruit and vegetable )?waste"
waste = re.findall(waste_pattern, text)

transformed_resource_pattern = r"free extracts|encapsulated extracts|nano-encapsulated extracts|nano-emulsion oil extracts"
transformed_resource = re.findall(transformed_resource_pattern, text)

w2r["waste"] = waste
w2r["transforming_process"] = transforming_process
w2r["transformed_resource"] = transformed_resource

print(w2r)
```

----------

```python
w2r = {"waste": [], "transforming_process": [], "transformed_resource": []}

# ... (rest of the code remains the same)

text = """
    # your text here
"""

w2r["waste"] += ["CO2", "carbons in the bio-oil"]
w2r["transforming_process"] += [
    "pyrolysis of coconut husk",
    "catalytic pyrolysis using a nickel-based egg-shell-type (Ni-ES) catalyst"
]
w2r["transformed_resource"] += ["syngas", "carbon monoxide (CO)", "pyrogenic oil"]
```

----------

```python
import re

# ...

transformed_resources = []
waste = w2r["waste"]
transforming_processes = w2r["transforming_process"]

text_content = re.sub(r'[^\w\s]', '', text)

for word in text_content.split():
    if word.lower() in ["sludge", "wastewater", "pollutants", "humic acid"]:
        waste.append(word)
    elif word.lower() in ["coagulation", "adsorption", "treatment"]:
        transforming_processes.append(word)
    elif word.lower() in ["biochar", "ferric chloride", "iron(III) chloride"]:
        transformed_resources.append(word)

w2r["transformed_resource"].extend(transformed_resources)
```

----------

```python
w2r["waste"].append("Thermal hydrolyzed sludge (THS)")
w2r["transforming_process"].append("Chain elongation (CE) technology")
w2r["transformed_resource"].append("Medium-chain fatty acids (MCFAs), ethanol, and acetate")
```

----------

Here is the added code to extract waste, transforming_process, and transformed_resource:

```python
# Extracting Waste
w2r["waste"].append("Water treatment sludge (WTS) disposal in landfills and estuaries")

# Extracting Transforming Process
transforming_processes = [
    "production of structural sintering clay bricks",
    "substitute for clay in the manufacturing process",
    "fired in an oven at 700 °C for 3 h"
]
w2r["transforming_process"].extend(transforming_processes)

# Extracting Transformed Resource
transformed_resources = [
    "structural sintering clay bricks",
    "ecofriendly construction materials"
]
w2r["transformed_resource"].extend(transformed_resources)
```

----------

```python
w2r = {"waste": [], "transforming_process": [], "transformed_resource": []}
text = "..."
w2r["waste"].append("Waste activated sludge (WAS)")
w2r["transforming_process"].extend(["oxidative hydrothermal pretreatment", "wet oxidation (WO)", "ultrafiltered using ceramic membranes", "extraction with trioctylamine (TOA), tributylphosphate (TBP) and octan-1-ol"])
w2r["transformed_resource"].append("Short-chain organic acids (SCFAs)")
```

----------

```python
import re

w2r = {"waste": [], "transforming_process": [], "transformed_resource": []}

text = "Effluents derived from industrial production can contain pollutants as oils, dyes, plaguicides, emerging organic pollutants, detergents, disinfectants, and toxic metals. The presence of high concentrations of pollutants in effluents makes them an important source of environmental pollution. To solve this problem, various technologies have been developed for the treatment of industrial effluents. Currently, sustainable industrial production and the wastes reuse is of great importance for the economic development and environmental countries protection. This review initially proposes an introduction to sustainable industrial production, its foundations and aspects related to the circular economy and the process intensification. Current trends in waste reuse in Latin America are presented. In addition, the latest advances on the technologies used for effluents treatment are commented and discussed, considering the different sustainability indicators. The contributions reported in this manuscript demonstrated the efficiency of eliminating pollutants present in industrial effluents, reaching removal percentages of pollutants from 20 to 100 %. Finally, it is important to mention that the applied technologies are useful not only for the decontamination of an industrial effluent and the environmental care but also for the possibility of give an additional use to these resources considering the water shortage present in many parts of Latin America. © 2024"

# Extracting waste, transforming_process, transformed_resource
waste = re.findall(r"\b[oil|dye|plaguicide|organic pollutant|detergent|disinfectant|metal|effluent|pollutant|effluent|resource|water|effluent]\b", text)
transforming_process = ["treatment of industrial effluents"]
transformed_resource = ["reaching removal percentages of pollutants from 20 to 100 %"]

w2r["waste"] += waste
w2r["transforming_process"] += transforming_process
w2r["transformed_resource"] += transformed_resource

print(w2r)
```

----------

```python
import re

# Extracting keywords from the text
waste = re.findall(r'sediments?|marble|waste', text.lower())
transforming_process = re.findall(r'mixture?|prepared|treated|hydraulic binders|lime', text.lower())
transformed_resource = re.findall(r'mixtures?|road subgrade construction', text.lower())

# Updating the dictionary
w2r["waste"] = list(set(waste))
w2r["transforming_process"] = list(set(transforming_process))
w2r["transformed_resource"] = list(set(transformed_resource))

print("Waste:", w2r["waste"])
print("Transforming Process:", w2r["transforming_process"])
print("Transformed Resource:", w2r["transformed_resource"])
```

----------

Here is the additional code to extract `waste`, `transforming_process`, and `transformed_resource` from the text:

```python
import re

# ... (rest of the code remains the same)

def extract_components(text):
    waste = []
    transforming_process = []
    transformed_resource = []

    matches_waste = re.findall(r"waste|feedstocks", text)
    for match in matches_waste:
        waste.append(match.lower())

    matches_transforming_process = re.findall(r"fabricated|encapsulated|impregnation|utilization", text)
    for match in matches_transforming_process:
        transforming_process.append(match.lower())

    matches_transformed_resource = re.findall(r"composite materials|corncob biochar/hexadecane composite|biochar-based composite", text)
    for match in matches_transformed_resource:
        transformed_resource.append(match.lower())

    return waste, transforming_process, transformed_resource

waste, transforming_process, transformed_resource = extract_components(text)

print(waste)
print(transforming_process)
print(transformed_resource)
```

Note that this code uses regular expressions to find occurrences of the words in the text. The `extract_components` function returns three lists: `waste`, `transforming_process`, and `transformed_resource`.

----------

Here is the added code:

```python
import re

# ... existing code ...

w2r["waste"].extend(re.findall(r"([a-zA-Z]+-?like material) with a share of (\d+%)?", text))
w2r["transforming_process"].append("Landfill mining")
w2r["transformed_resource"].extend(re.findall(r"(\d+) tonnes of waste is combustible fraction|GHG emissions through incineration of one tonne of dry combustible fraction would be (\d+) kg CO2-eq, with (\d+) kWh of electrical energy generation potential", text))
```

----------

```python
# ... existing code ...

w2r["waste"].append("salt-slag/salt-cake hazardous wastes")
w2r["transforming_process"].extend(["recycling aluminium in rotary furnaces", "valorisation of salt-slag residues"])
w2r["transformed_resource"].extend(["secondary cast aluminium alloys", "ammonium sulphate", "non-metallic compounds (NMCs)", "salts and aluminium concentrates"])
```

----------

```python
import re

# Existing code...
w2r = {"waste": [], "transforming_process": [], "transformed_resource": []}
text = "... (long text)"

# Added code...
waste_keywords = ["waste", "byproducts", "sludge"]
transforming_process_keywords = ["valorizing", "repurposing", "producing", "investigated", "replacing"]
transformed_resource_keywords = ["magnesium oxysulfate (MOS)-based fiber cement boards"]

# Extract waste
for keyword in waste_keywords:
    w2r["waste"].append(re.search(keyword, text).group())

# Extract transforming_process
for keyword in transforming_process_keywords:
    w2r["transforming_process"].append(re.search(keyword, text).group())

# Extract transformed_resource
for keyword in transformed_resource_keywords:
    w2r["transformed_resource"].append(re.search(keyword, text).group())
```

----------

```python
# Extracting relevant information from text
import re

w2r = {"waste": [], "transforming_process": [], "transformed_resource": []}

pattern_waste = r"food waste|waste|\bpyrolysis\b"
pattern_transforming_process = r"\bpyrolysis\b|\bas exemplary food waste\b|\bpromoting food waste valorization\b"
pattern_transformed_resource = r"\bsyngas\b|\bloil\b|\bcatalyst\b"

matches_waste = re.findall(pattern_waste, text)
matches_transforming_process = re.findall(pattern_transforming_process, text)
matches_transformed_resource = re.findall(pattern_transformed_resource, text)

# Add extracted information to the dictionary
w2r["waste"] = matches_waste
w2r["transforming_process"] = matches_transforming_process
w2r["transformed_resource"] = matches_transformed_resource
```

----------

```python
import re

# ... (rest of your code remains the same)

waste = []
transforming_process = []
transformed_resource = []

for sentence in text.split('\n'):
    # Check if sentence contains words related to waste, transforming process and transformed resource
    if any(word in sentence for word in ["plastic", "biomass", "digestion", "methane", "energy"]):
        for key in w2r:
            if re.search(key, sentence):
                if key == 'waste':
                    waste.append(sentence)
                elif key == 'transforming_process':
                    transforming_process.append(sentence)
                elif key == 'transformed_resource':
                    transformed_resource.append(sentence)

print(waste)
print(transforming_process)
print(transformed_resource)
```

----------

Here's how you can extract `waste`, `transforming_process`, and `transformed_resource` from the text:

```python
import re

# ... (rest of your code remains the same)

w2r = {"waste": [], "transforming_process": [], "transformed_resource": []}

text = "... (your original text here)"

def extract_waste_and_transform():
    global w2r
    
    # Waste extraction
    waste_keywords = ["waste", "incineration bottom ash"]
    for keyword in waste_keywords:
        match = re.search(keyword, text)
        if match:
            start_pos = match.start()
            end_pos = match.end()
            matched_text = text[start_pos:end_pos]
            w2r["waste"].append(matched_text)

    # Transforming process extraction
    transforming_process_keywords = ["incineration", "treatment"]
    for keyword in transforming_process_keywords:
        match = re.search(keyword, text)
        if match:
            start_pos = match.start()
            end_pos = match.end()
            matched_text = text[start_pos:end_pos]
            w2r["transforming_process"].append(matched_text)

    # Transformed resource extraction
    transformed_resource_keywords = ["IBA in road layers", "reuse of IBA"]
    for keyword in transformed_resource_keywords:
        match = re.search(keyword, text)
        if match:
            start_pos = match.start()
            end_pos = match.end()
            matched_text = text[start_pos:end_pos]
            w2r["transformed_resource"].append(matched_text)

extract_waste_and_transform()

print("Waste:", w2r["waste"])
print("Transforming process:", w2r["transforming_process"])
print("Transformed resource:", w2r["transformed_resource"])
```

----------

