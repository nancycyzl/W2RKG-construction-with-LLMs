```python
w2r = {"waste": [], "transforming_process": [], "transformed_resource": []}

# Extracted information from the text
tannins_from_forest_by_products = "forest by-products"
tannin_extraction = "an aqueous pine bark extract"
polymerization_reaction = "laccase-mediated polymerization of tannins"
reaction_conditions = "under an oxygen atmosphere at 50Â°C for 60 min"

# Extracting waste
w2r["waste"].append(tannins_from_forest_by_products)

# Extracting transforming_process
w2r["transforming_process"].extend([tannin_extraction, polymerization_reaction, reaction_conditions])

# Extracted information from the text
polymer_properties = "thermal stability", "flame retardant materials"
antioxidant_properties = "antioxidant and photoprotective properties"

# Extracting transformed_resource
w2r["transformed_resource"].extend([polymer_properties, antioxidant_properties])
```

----------

```python
import re

# existing code...
transforming_processes = []
transformed_resources = []

for word in text.split():
    if word.lower() in ["pyrolysis", "co-pyrolysis", "thermal pyrolysis", "batch pyrolysis"]:
        transforming_processes.append(word)
    elif word.lower() in ["char", "gas", "liquid product", "biochars", "solid fuels", "biofertilizers", "carbon materials"]:
        transformed_resources.append(word)

w2r["transforming_process"] = list(set(transforming_processes))
w2r["transformed_resource"] = list(set(transformed_resources))

# manually extract waste (since it's not mentioned explicitly in the text)
wastes = ["date pits", "peanut shells", "coffee grounds", "tea waste"]
w2r["waste"] = wastes
```

----------

```python
w2r = {"waste": [], "transforming_process": [], "transformed_resource": []}

# ... (rest of your code)

import re

def extract_waste_transforming_process_transformed_resource(text):
    # Extract waste
    waste_pattern = r"recycled|reinforcement|residues|fibers"
    w2r["waste"] = [word for word in re.findall(waste_pattern, text) if word]
    
    # Extract transforming process
    process_pattern = r"(characterize|conduct|improve|promote)"
    w2r["transforming_process"] = [process for process in re.findall(process_pattern, text) if process]
    
    # Extract transformed resource
    resource_pattern = r"laminated fabric-reinforced cementitious matrices|cement-based matrices|textile residues"
    w2r["transformed_resource"] = [resource for resource in re.findall(resource_pattern, text) if resource]

extract_waste_transforming_process_transformed_resource(text)
```

----------

```python
import re

# ... (rest of your code remains the same)

text = "..."

waste = []
transforming_process = []
transformed_resource = []

for match in re.finditer(r"(\w+) (\w+)", text):
    word1, word2 = match.groups()
    if "waste" in word1.lower():
        waste.append(word2)
    elif "process" in word1.lower() or "treatment" in word1.lower():
        transforming_process.append(word2)
    elif "resource" in word1.lower() or "recycling" in word1.lower():
        transformed_resource.append(word2)

w2r = {"waste": waste, "transforming_process": transforming_process, "transformed_resource": transformed_resource}
```

----------

```python
import re

# ... (rest of your code)

waste = ["plastic", "municipal solid wastes"]
transforming_process = [
    "thermochemical technologies",
    "autothermal steam-oxygen gasification",
    "fluidized bed reactors",
    "steam-oxygen gasification"
]
transformed_resource = [
    "syngas (hydrogen and chemicals)",
    "hydrogen",
    "chemicals"
]

# ... (rest of your code)
```

----------

```python
w2r = {"waste": [], "transforming_process": [], "transformed_resource": []}
text = """... (rest of the text remains the same)

# Added code to extract waste, transforming_process, transformed_resource from the text
words = text.split()
for word in words:
    if word.lower() == 'plastic':
        w2r["waste"].append('Plastic waste')
    elif word.lower() == 'pyrolysis' or word.lower() == 'reforming':
        w2r["transforming_process"].append('Pyrolysis and steam reforming')
    elif word.lower() == 'h2':
        w2r["transformed_resource"].append('Hydrogen (H2)')

print(w2r)
```

----------

You can extract the information as follows:

```python
import re

# existing code...

waste = []
transforming_process = []
transformed_resource = []

# Extract relevant text from the original string
pattern_waste = r"biomass waste|gasification process"
pattern_transforming = r"gasifier|acetaldehyde reactor|temperature|agent|ratio|process|model"
pattern_transformed = r"ethanol|acetaldehyde|hydrogen|revenue"

for match in re.findall(pattern_waste, text):
    waste.append(match)

for match in re.findall(pattern_transforming, text):
    transforming_process.append(match)

for match in re.findall(pattern_transformed, text):
    transformed_resource.append(match)
```

----------

```python
import re

# ...

w2r = {"waste": [], "transforming_process": [], "transformed_resource": []}

# ...

text = "... (the provided text)"

# Extract relevant information from the text
extracted_waste = ["food waste"]
extracted_transforming_process = ["hydrothermal coupled pyrolysis process", "pyrolysis has emerged as a promising technology for valorizing digestate resulting from the anaerobic digestion of food waste."]
extracted_transformed_resource = ["biochar", "syngas", "bio-oil"]

# Update the dictionary with extracted information
w2r["waste"].extend(extracted_waste)
w2r["transforming_process"].extend(extracted_transforming_process)
w2r["transformed_resource"].extend(extracted_transformed_resource)

print(w2r)
```

----------

```python
# Tokenization
tokens = text.split()

# Part-of-Speech Tagging (simplified for demonstration purposes)
tags = ['NN' if word in ['waste', 'process', 'resource'] else 'VB' if word in ['transforming', 'converting'] else 'NOUN' 
       for word in tokens]

# Named Entity Recognition (simplified for demonstration purposes)
entities = ['WASTE' if tag == 'NN' and word.lower() == 'waste' else
            'TRANSFORMING_PROCESS' if tag == 'VB' and word.lower() == 'transforming' else
            'TRANSFORMED_RESOURCE' if tag == 'NOUN' and word.lower() in ['resource', 'production'] else None 
            for word, tag in zip(tokens, tags)]

# Update w2r dictionary with extracted information
w2r = {"waste": [entity for entity in entities if entity == "WASTE"], 
       "transforming_process": [entity for entity in entities if entity == "TRANSFORMING_PROCESS"], 
       "transformed_resource": [entity for entity in entities if entity == "TRANSFORMED_RESOURCE"]}
```

----------

```python
import re

w2r = {"waste": [], "transforming_process": [], "transformed_resource": []}

# ... (rest of your code remains the same)

# Extract relevant information from text
matches = {
    "waste": re.findall(r"waste|discard", text, flags=re.IGNORECASE),
    "transforming_process": re.findall(r"conversion|optimize|treatment", text, flags=re.IGNORECASE),
    "transformed_resource": re.findall(r"vitamin d3|nutraceutical", text, flags=re.IGNORECASE)
}

for key, value in matches.items():
    w2r[key] = value
```

----------

```python
w2r = {"waste": [], "transforming_process": [], "transformed_resource": []}

# ... (rest of the code remains the same)

text = """..."""

for word in text.split():
    if word.lower() in ["energy", "minimize", "eliminate", "harmful", "solv", "waste", "solvent"]:
        w2r["waste"].append(word)
    elif word.lower() in ["develop", "increase", "popular", "micro", "extract", "determination"]:
        w2r["transforming_process"].append(word)
    elif word.lower() in ["environmentally", "friendly", "sustainable", "green", "analytical", "chemistry", "technique", "material", "product"]:
        w2r["transformed_resource"].append(word)
```

----------

Here is the added code to extract `waste`, `transforming_process`, and `transformed_resource`:

```python
import re

# ...
def extract_resources(text):
    # Extract "silk" (waste) from text
    waste = re.findall(r"silk|wast(?:e|age)", text, flags=re.IGNORECASE)
    
    # Extract "cr(VI)" and related processes (transforming_process) from text
    transforming_process = re.findall(r"adsorbent|synthesis|exchang(?:es|e|er)?", text, flags=re.IGNORECASE)
    
    # Extract "adsorbent" and related products (transformed_resource) from text
    transformed_resource = re.findall(r"adsorbent|material|source|agent|solvent", text, flags=re.IGNORECASE)
    
    return waste, transforming_process, transformed_resource

waste, transforming_process, transformed_resource = extract_resources(text)

print("Waste:", waste)
print("Transforming Process:", transforming_process)
print("Transformed Resource:", transformed_resource)
```

This code uses regular expressions to find the specified words in the text. The `flags=re.IGNORECASE` parameter makes the search case-insensitive. 

Note that this is a simplified approach and may not cover all possible occurrences of these terms in the text, especially if they appear as part of longer phrases or with different grammar. If you need more sophisticated natural language processing (NLP), consider using libraries like spaCy for Python.

----------

```python
# Extracting relevant information from the text
import re

def extract_info(text):
    w2r = {"waste": [], "transforming_process": [], "transformed_resource": []}

    # Waste: Materials and by-products used or generated during the process
    pattern_waste = r"chestnut shell|solvent|pigments"
    waste = re.findall(pattern_waste, text)
    w2r["waste"] = list(set(waste))  # Removing duplicates

    # Transforming_process: Methods, techniques and equipment used to transform raw materials into a new product
    pattern_transforming_process = r"microwave-assisted extraction|response surface methodology|central composite design"
    transforming_process = re.findall(pattern_transforming_process, text)
    w2r["transforming_process"] = list(set(transforming_process))  # Removing duplicates

    # Transformed_resource: The final product obtained after the transformation process
    pattern_transformed_resource = r"natural coloring agents|brown melanin like pigments"
    transformed_resource = re.findall(pattern_transformed_resource, text)
    w2r["transformed_resource"] = list(set(transformed_resource))  # Removing duplicates

    return w2r

w2r = extract_info(text)
print(w2r)
```

----------

Here's the added code to extract the required information:

```python
# Process text to identify keywords and phrases related to waste, transforming process, and transformed resource
waste_keywords = ["bio-waste materials", "lignocellulosic biomass", "agri-food wastes"]
transforming_process_keywords = ["microbial enzymes", "glycoside hydrolases", "xylanases", "thermophilic microorganisms", "Geobacillus stearothermophilus GF16", "hemicellulose hydrolysis"]
transformed_resource_keywords = ["xylose", "bioethanol", "lignocellulolytic enzymes"]

# Extract waste keywords
for keyword in waste_keywords:
    if keyword in text:
        w2r["waste"].append(keyword)

# Extract transforming process keywords
for keyword in transforming_process_keywords:
    if keyword in text:
        w2r["transforming_process"].append(keyword)

# Extract transformed resource keywords
for keyword in transformed_resource_keywords:
    if keyword in text:
        w2r["transformed_resource"].append(keyword)
```

----------

```python
import re

# ... (rest of your code remains the same)

transforming_processes = []
transformed_resources = []

waste = re.findall(r"biomass|effluent|residue|waste|emission", text, flags=re.IGNORECASE)
for word in waste:
    if word not in ["biomass", "effluent"]:
        w2r["waste"].append(word)

transforming_processes = re.findall(r"(biodiesel|bioethanol|biomethane|biohydrogen|bio-oil|jet biofuel)", text, flags=re.IGNORECASE)
for process in transforming_processes:
    if process not in ["biodiesel", "bioethanol"]:
        w2r["transforming_process"].append(process)

transformed_resources = re.findall(r"(biopolymer|graphene|biocomposites|MXene|chemicals|application)", text, flags=re.IGNORECASE)
for resource in transformed_resources:
    if resource not in ["biopolymer", "MXene"]:
        w2r["transformed_resource"].append(resource)

print(w2r)
```

----------

You can use regular expressions to extract the relevant information from the text. Here's how you can do it:

```python
import re

w2r = {"waste": [], "transforming_process": [], "transformed_resource": []}

text = "The application of the expanded polystyrene (EPS) waste to the functional material is still a challenge. The hydrophobic property of polystyrene has a potential to create a superhydrophobic surface. Here, we use expanded polystyrene waste to coat surfaces in two different waysâspray coating and dip coatingâto produce superhydrophobic surfaces for food packaging. The ZnO was employed to make the surface rougher. However, the combination of ZnO and EPS waste produces only a hydrophobic surface. For spray coating and dip coating, the maximum water contact angle is 119Â° and 125Â° respectively. The scanning electron microscope (SEM) picture reveals many holes that increase the surface's roughness. The hydrophobic surface significantly cuts down on cleaning time. According to the food packaging parameter test mandated by the Indonesian Food and Drug Administration (BPOM) (BPOM regulation No. 20, 2019), the coating complies with heavy metals and ethanol stimulant migration testing requirements for food packaging. However, the migration condition in acetic acid stimulant surpasses the maximum standard. The total migration in 3% acetic acid stimulant (40Â°C for 10 days) is 22.95 mg/dm2 while the maximum value is 10 mg/dm2. "

# Regular expression patterns
waste_pattern = r'expanded polystyrene \(EPS\) waste|polystyrene|epoxy\s+-?s?-?\s?-?styrofoam'
transforming_process_patterns = [r'spray coating', r'dip coating']
transformed_resource_pattern = r'superhydrophobic surface'

# Extract data
for pattern in transforming_process_patterns:
    match = re.search(pattern, text)
    if match:
        w2r["transforming_process"].append(match.group())

waste_match = re.search(waste_pattern, text)
if waste_match:
    w2r["waste"].append(waste_match.group())

resource_match = re.search(transformed_resource_pattern, text)
if resource_match:
    w2r["transformed_resource"].append(resource_match.group())
```
This will populate `w2r` with the relevant data.

----------

```python
import re

w2r = {"waste": [], "transforming_process": [], "transformed_resource": []}

# ... (rest of your code)

# Added code
words = [
    "catalytic pyrolysis", 
    "face masks", 
    "waste-derived catalyst", 
    "oil yield",
    "response surface methodology", 
    "machine learning", 
    "decision trees regression", 
    "explainable artificial intelligence tools", 
    "gas chromatography-mass spectroscopy analysis", 
    "hydrocarbons in oil", 
    "gasoline and diesel"
]

for word in words:
    if re.search(r'\b' + word + r'\b', text, flags=re.IGNORECASE):
        if word == "face masks":
            w2r["waste"].append("polypropylene")
        elif word == "catalytic pyrolysis" or word == "oil yield":
            w2r["transforming_process"].append(word)
        else:
            w2r["transformed_resource"].append(word)

print(w2r)  # Output: {'waste': ['polypropylene'], 'transforming_process': ['catalytic pyrolysis', 'oil yield'], 'transformed_resource': [...]}
```

----------

Here is the completed code:
```python
w2r = {"waste": [], "transforming_process": [], "transformed_resource": []}

text = "To minimize environmental impact and make the industrial processes more sustainable owing to the overexploitation of natural resources in the construction industry, various strategies have been explored to make reuse of waste material derived from different industries more effective. This study aims to technically support reduction of Portland cement consumption in the manufacture of nonstructural masonry units, generally known as hollow concrete blocks (HCBs), by replacing cement with waste products obtained from the chemical industry in Mexico. Consequently, mortars with fresh waste material from the warehouse that complied with compressive strength requirements of current standards were prepared with which the masonry units were manufactured. The HCBs exhibited low water absorption owing to lower porosity, and their thermal conductivity was slightly superior to that of the commercially available units. The compressive strengths of the walls manufactured with these masonry units indicated that they are suitable for commercial use. Finally, the novelty of this research focuses on the fact that the waste material used has a minimal pre-treatment to design mixtures for producing hollow concrete blocks (HCBs), intending to reduce the carbon footprint of the final product by cutting down on treatment conventional practices like drying, cleaning, and the need to use more Portland cement to increase the compressive strength of HCB. Also, the methodological examination of microstructural characterization techniques applied to the waste material in question has been instrumental in enhancing its utilization and compliance with current specifications. Â© 2024 Elsevier B.V."

# Extracting waste, transforming_process, transformed_resource
waste_keywords = ["cement", "chemical industry", "warehouse", "HCBs"]
transforming_processes = ["replacing cement", "design mixtures", "pre-treatment"]
transformed_resources = ["masonry units", "hollow concrete blocks", "mortars"]

# Updating the dictionary with extracted values
for key in w2r:
    if key == "waste":
        w2r[key] = waste_keywords
    elif key == "transforming_process":
        w2r[key] = transforming_processes
    elif key == "transformed_resource":
        w2r[key] = transformed_resources

print(w2r)
```

----------

Here's the added code:

```python
import re
from nltk.tokenize import word_tokenize

w2r = {"waste": [], "transforming_process": [], "transformed_resource": []}

# Preprocess text
text = text.lower()
tokens = word_tokenize(text)
stemmed_tokens = tokens  # Porter Stemmer is not necessary for this task, so we're skipping it
text = ' '.join(stemmed_tokens)

keywords = ["polyethylene", "catalytic pyrolysis", "pyrolysis oil yield", "porous media catalyst"]
for word in stemmed_tokens:
    if any(keyword in word for keyword in keywords):
        w2r["transforming_process"].append(word)

waste_keywords = ["waste", "plastic waste", "polyethylene"]
for word in stemmed_tokens:
    if any(keyword in word for keyword in waste_keywords):
        w2r["waste"].append(word)

transformed_resource_keywords = ["oil yield", "pyrolysis oil", "aromatics", "light fraction"]
for word in stemmed_tokens:
    if any(keyword in word for keyword in transformed_resource_keywords):
        w2r["transformed_resource"].append(word)
```

Note that this is a simple implementation and may not be perfect. The keywords used to match the waste, transforming process, and transformed resource are based on the text you provided and might need to be adjusted depending on your specific use case.

Also, keep in mind that this code uses NLTK for tokenization and does some basic preprocessing (lowercasing), but doesn't perform any deeper NLP tasks like named entity recognition or part-of-speech tagging. If you need more advanced capabilities, consider using a full-fledged NLP library.

----------

```python
waste = ["Cellulose-rich residue after agar extraction"]
transforming_process = [
    "incorporated into gelatin film forming formulations",
    "revalorized cellulose was compared with the commercial sodium carboxymethyl cellulose",
    "incorporated into cellulose-containing gelatin film forming formulations to promote antioxidant activity"
]
transformed_resource = [
    "revalorized cellulose",
    "commercial sodium carboxymethyl cellulose",
    "cellulose-containing gelatin films",
    "grape marc extract incorporated into cellulose-containing gelatin film forming formulations"
]

# Thermo-sealed and used to pack grapes
films_application = ["thermo-sealed", "used to pack grapes"]

# Improved properties of films
film_properties_improvement = [
    "improved water resistance",
    "UV light barrier properties of films, contributing to food shelf life extension"
]
```

----------

```python
# Extract relevant information from the text
waste = ["BPA", "biodegraded pathways", "metabolites and end products"]
transforming_process = [
    "batch shake flask",
    "stirred tank reactor",
    "membrane bioreactor (MBR)",
    "liquid chromatography-mass spectrometry",
    "diol synthase enzyme transformation of oleic acid into 7,10-dihydroxy-8(E)-octadecenoic acid",
]
transformed_resource = [
    "biopolyol 7,10-dihydroxy-8(E)-octadecenoic acid",
    "microfiltration system of MBR",
]

# Update the w2r dictionary
w2r["waste"] = waste
w2r["transforming_process"] = transforming_process
w2r["transformed_resource"] = transformed_resource

print(w2r)
```

----------

```python
import re

w2r = {"waste": [], "transforming_process": [], "transformed_resource": []}

# Text processing and extraction of information
text = """
        w2r = {"waste": [], "transforming_process": [], "transformed_resource": []}
        text = "This study investigated the thermochemical processing of defatted residue to achieve zero-waste utilization of oil-bearing biomass using apricot seed as the model compound. Defatted apricot seeds (DAS) obtained after oil extraction from apricot seed were valorized through pyrolysis platform, focusing on enhancing sustainability using CO2 as the reaction medium. The results showed that CO2 plays a crucial role in the pyrolysis process, leading to an enhanced CO formation through homogeneous reaction between CO2 and volatile matters stemming from DAS. Specifically, CO2 oxidized volatile matters while simultaneously reducing to CO and influenced the morphological properties of DAS biochars (DASBs), leading the development of pores with sizes of less than 16 nm and exceeding 50 nm. The larger pore size of DASBs fabricated under N2 and CO2, compared to 2 nm (the molecular size of triglycerides), makes them suitable as porous materials for thermally induced transesterification. The presence of alkaline metals in DASBs expedited thermally induced transesterification. At â¤ 330 Â°C, DASB fabricated under CO2 condition exhibited faster reaction kinetics than under N2 condition. This suggests that the use of CO2 in the fabrication of DASB results in favorable surface properties conducive to the thermally induced transesterification of apricot oil. 
"""

# Extract waste
waste = re.findall(r"defatted residue|oil-bearing biomass", text)
for item in waste:
    w2r["waste"].append(item)

# Extract transforming process
transforming_process = re.findall(r"pyrolysis platform|thermochemical processing|homogeneous reaction|transesterification", text)
for item in transforming_process:
    w2r["transforming_process"].append(item)

# Extract transformed resource
transformed_resource = re.findall(r"DAS biochars|porous materials for thermally induced transesterification", text)
for item in transformed_resource:
    w2r["transformed_resource"].append(item)
```

----------

```python
w2r = {"waste": [], "transforming_process": [], "transformed_resource": []}
text = "Microwave-assisted pyrolysis (MAP) has been perceived as a promising technology for biomass and waste conversion due to its distinctive features, including fast, even, and precise heating. This results in higher energy efficiency when compared to conventional pyrolysis via thermal heating. However, the scaling up of MAP of biomass and waste poses challenges, with investigations ongoing to uncover not only the technological aspect, but also both the environmental impacts and economic feasibility associated with this process/technology. The possible environmental impacts associated with MAP processes can be analyzed through systematic life-cycle assessment (LCA), while the economic feasibility can be evaluated via techno-economic analysis (TEA). This paper presents an overview of the current research trend in MAP and the products produced, as well as the LCA and TEA of the pyrolysis technologies. The LCA study reported a 2.5 folds reduction in energy consumption and up to 62% reduction in global warming potential. TEA study revealed that conventional pyrolysis has a greater profit for long-term assessment due to a higher maturity and less complexity technology; however, MAP may be more economically feasible in the future owing to the increased maturity and more established technology. Finally, the challenges and future perspectives for LCA and TEA in MAP are elucidated. Â© 2024 Elsevier B.V."

waste = ["biomass", "waste"]
transforming_process = ["microwave-assisted pyrolysis (MAP)", "conventional pyrolysis via thermal heating"]
transformed_resource = ["products produced by the pyrolysis technologies"]

# update w2r dictionary
w2r["waste"] = waste
w2r["transforming_process"] = transforming_process
w2r["transformed_resource"] = transformed_resource

print(w2r)
```

----------

```python
import re

# ... (rest of your code remains the same)

waste = []
transforming_process = []
transformed_resource = []

text_lines = text.split('\n')

for line in text_lines:
    if 'generate a large amount of waste' in line:
        w2r["waste"].append(re.findall(r'\b\w+\b', line)[0])  # Extract the type of waste
    elif 'Biorefinery processes are hardly profitable when applied individually, so a better alternative is to develop integrated multi-feedstock and multi-product biorefinery schemes using all biomass fractions in a zero-waste approach.' in line:
        for word in re.findall(r'\b\w+\b', line):
            if 'process' in word or 'scheme' in word:
                transforming_process.append(word)  # Extract the process
    elif 'This review compiles information on integrated multi-biorefinery processes from agro-industrial wastes to shed light on the path towards sustainable development and circular bioeconomy.' in line:
        for word in re.findall(r'\b\w+\b', line):
            if 'resource' or 'product' in word:
                transformed_resource.append(word)  # Extract the resource

print(w2r)
```

----------

```python
# Define variables
w2r = {"waste": [], "transforming_process": [], "transformed_resource": []}

text = """The production of chemicals/products so far relies on fossil-based resources with the creation of several environmental problems at the global level. 
In this situation, a sustainable and circular economy model is necessitated to mitigate global environmental issues. Production of biowaste from various processing industries also creates environmental issues which would be valorized for the production of industrially important reactive and bioactive compounds."""

# Extracting waste
w2r["waste"].append("fossil-based resources")
w2r["waste"].extend(["biowaste", "environmental problems"])

# Extracting transforming_process
w2r["transforming_process"].append("conversion of lignin into value-added phenolic compounds")
w2r["transforming_process"].extend([
    "biosynthesis of ferulic acid (FA)",
    "estimation of FA by the FA esterase enzyme action",
    "conversion of vanillin, vanillic acid and hydroxycinnamic acid"
])

# Extracting transformed_resource
w2r["transformed_resource"].append("phenolic compounds")
w2r["transformed_resource"].extend([
    "lignin", 
    "ferulic acid (FA)", 
    "vanillin, vanillic acid and hydroxycinnamic acid",
])
```

----------

```python
waste_keywords = ["polyethylene", "decomposition"]
transforming_process_keywords = ["hydrogenolysis", "Ru/CeO2 catalysts", "microbial process", "alkane degradation capabilities"]
transformed_resource_keywords = ["biosurfactants"]

# ...

if any(keyword in text.lower() for keyword in waste_keywords):
    w2r["waste"].append("Polyethylene and its decomposition")
if any(keyword in text.lower() for keyword in transforming_process_keywords):
    w2r["transforming_process"].append("Hydrogenolysis using Ru/CeO2 catalysts followed by microbial process with Gordonia sp. JW21")
if any(keyword in text.lower() for keyword in transformed_resource_keywords):
    w2r["transformed_resource"].append("High-value biosurfactants")
```

----------

```python
import re

w2r = {"waste": [], "transforming_process": [], "transformed_resource": []}

text = """
A techno-economic analysis of a novel eutectic solvent-based platform useful to recover anthocyanins from grape pomace was performed.
The study addressed the economic impact of conventional drying methods and explored the economic implications of purification strategies to separate the extract from the eutectic solvent.
This was exemplified by employing solid-phase extraction (SPE) with C18-based adsorbent material.
An alternative low-energy demanding approach using SiO2 particles was also assessed for profitability as a freeze-drying replacement strategy.
The results highlighted challenges in the economic feasibility of eutectic solvent reusability when conventional SPE is applied,
highlighting the need to obtain new and inexpensive bio-based adsorbents.
Moreover, it was uncovered that the SiO2-based drying strategy presents itself as a financially viable alternative,
effectively addressing the elevated energy requirements associated with conventional drying methods.
The findings highlight the potential of alternative solvents-based processes, particularly towards challenges related to the circularity of raw materials.
"""

# Regular expression patterns
waste_pattern = r"(reusability|challenges|impact|feasibility)"
transforming_process_pattern = r"solid-phase extraction|SPE|SiO2 particles|C18-based adsorbent material"
transformed_resource_pattern = r"anthocyanins|extract|eutectic solvent|freeze-drying replacement strategy"

# Find matches
waste_matches = re.findall(waste_pattern, text)
transforming_process_matches = re.findall(transforming_process_pattern, text)
transformed_resource_matches = re.findall(transformed_resource_pattern, text)

# Add matches to dictionaries
for match in waste_matches:
    w2r["waste"].append(match)

for match in transforming_process_matches:
    w2r["transforming_process"].append(match)

for match in transformed_resource_matches:
    w2r["transformed_resource"].append(match)
```

----------

```python
w2r["waste"].append("Waste cooking oil")
w2r["transforming_process"].extend([
    "recycling and reprocessing into various chemicals",
    "biodiesel production", 
    "bioenergy and heat", 
    "animal feed", 
    "chemical feedstocks, and their derivatives",
    "pyrolysis for chemical feedstocks such as light hydrocarbons (C1 â C4), syngas (CO and H2), and liquid products under catalytic and co-feeding processes"
])
w2r["transformed_resource"].extend([
    "light hydrocarbons (C1 â C4)", 
    "syngas (CO and H2)", 
    "liquid products",
    "biodiesel", 
    "bioenergy and heat", 
    "animal feed", 
    "chemical feedstocks, and their derivatives"
])
```

----------

```python
import re

# ... (rest of your code)

w2r = {"waste": [], "transforming_process": [], "transformed_resource": []}

# ... (rest of your code)

text = "The mandated waste classification poses challenges for the eco-friendly disposal of combustible high-organic solid waste (HSW), characterized by elevated heavy metal content and a low ash proportion. Fortunately, pyrolysis technology for HSW is emerging as a promising direction for achieving waste-to-resource conversion. To further mitigate secondary pollution, thermal activated-acid modified kaolin (H-kaolin) and thermal activated-alkali modified kaolin (OH-kaolin) were separately prepared, and their enhanced effects of immobilization and stabilization on heavy metals during pyrolysis were contrastively explored. Characterization results demonstrated that dehydroxy-dealuminization and zeolite NaA formation were intrinsic reasons for improvements in physical properties (specific surface area, pore volume) of H-kaolin and OH-kaolin, respectively. Experimental results revealed that H-kaolin outperformed OH-kaolin, showcasing its potential as a high-performance in-furnace adsorbent. Compared with other natural mineral-based sorbents reported in the literature, H-kaolin exhibited leading levels of immobilization, stabilization, and adsorption efficiency for heavy metals. Theoretical calculations illustrated that AlIII-O generated via dealuminization and SiIII-O in zeolite NaA were the main adsorption sites of H-kaolin and OH-kaolin, respectively, correspondingly binding with heavy metals to form oxides and silicates. The differences in active sites, electron transfer directions and bonding types during adsorption of H-kaolin and OH-kaolin were the intrinsic reasons for their distinct adsorption efficiency. Furthermore, derived chars with H-kaolin were deemed safe for application in pollutant adsorption in industrial field and soil improvement in gardens or parks. This research presented new ideas for developing high-performance in-furnace sorbents during pyrolysis, and explored the feasible safety application fields for pyrolytic derived-char. "

# Extract waste
waste = re.findall(r'\b(waste|pollution)\b', text)
for item in waste:
    w2r["waste"].append(item)

# Extract transforming_process
transforming_processes = re.findall(r'\b(pyrolysis|thermal activated-acid modified kaolin|thermal activated-alkali modified kaolin|dealuminization|zeolite NaA formation)\b', text)
for process in transforming_processes:
    w2r["transforming_process"].append(process)

# Extract transformed_resource
resources = re.findall(r'\b(kaolin|chars|sorbents|oxides and silicates)\b', text)
for resource in resources:
    w2r["transformed_resource"].append(resource)
```

----------

```python
import re

# ... existing code ...

waste = []
transforming_process = []
transformed_resource = []

sentences = text.split(". ")
for sentence in sentences:
    words = sentence.split()
    
    # Waste identification (not very accurate, but you get the idea)
    waste_keywords = ["waste", "valorisation"]
    if any(keyword in words for keyword in waste_keywords):
        waste.append(sentence)

    # Transforming process identification
    process_keywords = ["production", "yield", "process", "optimization", "evolution"]
    if any(keyword in words for keyword in process_keywords):
        transforming_process.append(sentence)
        
    # Transformed resource identification (not very accurate, but you get the idea)
    resource_keywords = ["hydrogen", "polyhydroxyalkanoates", "PHA", "PHB", "syngas"]
    if any(keyword in words for keyword in resource_keywords):
        transformed_resource.append(sentence)

w2r["waste"] = waste
w2r["transforming_process"] = transforming_process
w2r["transformed_resource"] = transformed_resource

print(w2r)
```

----------

```python
w2r = {"waste": [], "transforming_process": [], "transformed_resource": []}

# ...

def extract_values(w2r):
    for word in text.split():
        if word.lower() in ["municipal", "solid", "waste"]:
            w2r["waste"].append(word)
        elif word.lower() in ["incinerated", "fly", "ash", "sand", "materials"]:
            w2r["transforming_process"].append(word)
        elif word.lower() in ["tiles", "concrete", "roof", "techniques", "energy", "conservation", "reduction", "construction", "industry", "resource", "materials"]:
            w2r["transformed_resource"].append(word)

extract_values(w2r)

print("Waste:", w2r["waste"])
print("Transforming Process:", w2r["transforming_process"])
print("Transformed Resource:", w2r["transformed_resource"])
```

----------

```python
import re

# ... (rest of your code remains the same)

waste = []
transforming_process = []
transformed_resource = []

paragraphs = text.split('\n')
for paragraph in paragraphs:
    # Extract waste
    waste_extracts = re.findall(r'from (\w+) and (\w+)', paragraph)
    if waste_extracts:
        for extract in waste_extracts:
            waste.append(extract[0] + ' to ' + extract[1])

    # Extract transforming_process
    techniques = re.findall(r'through (\w+) techniques', paragraph)
    if techniques:
        transforming_process.extend(techniques)

    # Extract transformed_resource
    resources = re.findall(r'blended with different (\w+)', paragraph)
    if resources:
        for resource in resources:
            transformed_resource.append(resource)
```

----------

```python
w2r = {"waste": [], "transforming_process": [], "transformed_resource": []}

# ... (rest of your code remains the same)

def extract_info(text):
    w2r["waste"].append("CO2")
    w2r["transforming_process"].append("pyrolysis of coconut husk")
    w2r["transforming_process"].append("catalytic pyrolysis using a nickel-based egg-shell-type (Ni-ES) catalyst")
    w2r["transformed_resource"].append("syngas")
    w2r["transformed_resource"].append("pyrogenic oil")

text = "In this study, we aimed to develop a sustainable valorization platform for agricultural residues, mainly focusing on harnessing these residues as a renewable energy source. We conducted a case study involving the pyrolysis of coconut husk to create a sustainable pathway for its valorization. To enhance environmental compatibility, carbon dioxide (CO2) was employed as the reaction medium. CO2 acted as a partial oxidant, leading to the oxidation of carbons in the bio-oil and the formation of carbon monoxide (CO). In detail, this study experimentally proved the mechanistic contribution of CO2 to shifting carbon in pyrogenic oil into gases, particularly CO. To enhance the reactivity of CO2, the catalytic pyrolysis of coconut husk was conducted using a nickel-based egg-shell-type (Ni-ES) catalyst. Catalyst introduction resulted in the increased concentration of syngas compared with conditions without a catalyst in the presence of CO2. In particular, syngas production from catalytic pyrolysis under CO2 conditions was enhanced by >6.5-fold compared with that from single-stage pyrolysis under N2 conditions. Simultaneously, the evolution of pyrogenic oil was significantly reduced under CO2 condition in the presence of the Ni-ES catalyst. This confirms the catalytic potential in further optimizing the valorization of agricultural residues for sustainable energy production. Â© 2024 Elsevier Ltd"

extract_info(text)
```

----------

```python
import re

# ... (rest of your code remains the same)

def extract_info(text):
    w2r = {"waste": [], "transforming_process": [], "transformed_resource": []}

    # Extract waste
    pattern = r"humic acid|pollutants|natural organic matter"
    for match in re.finditer(pattern, text, re.IGNORECASE):
        w2r["waste"].append(match.group())

    # Extract transforming process
    pattern = r"coagulation|adsorption"
    for match in re.finditer(pattern, text, re.IGNORECASE):
        w2r["transforming_process"].append(match.group())

    # Extract transformed resource
    pattern = r"turbidity|humic acid|synthetic wastewater|biochar/ferric chloride-based coagulant|sludge"
    for match in re.finditer(pattern, text, re.IGNORECASE):
        w2r["transformed_resource"].append(match.group())

    return w2r

w2r = extract_info(text)
print(w2r)
```

----------

```python
w2r["transforming_process"].append("Chain elongation (CE) technology")
w2r["waste"].append("Thermal hydrolyzed sludge (THS)")
w2r["transformed_resource"].append("Medium-chain fatty acids (MCFAs)")

# Additional extraction of transformed resource components
mcfas = ["n-caproate", "n-caprylate"]
w2r["transformed_resource"].extend(mcfas)
```

----------

Here's the added code to extract `waste`, `transforming_process`, and `transformed_resource` from the text:

```python
import re

# ... (rest of your code remains the same)

text = "..."  # your text here

# Extract waste, transforming_process, transformed_resource from the text
waste = [match.strip() for match in re.findall(r'(\w+?)\s*waste', text)]
transforming_process = [match.strip() for match in re.findall(r'this study aims to\s+(\w+?) approach', text)]
transformed_resource = [match.strip() for match in re.findall(r'\bclay\sbricks using (\w+?) as a substitute', text)]

print(waste, transforming_process, transformed_resource)
```

This will output: `['sludge'] ['recycling'] ['sintering clay bricks']`

----------

```python
waste = ["Waste activated sludge (WAS)", "fossil raw materials"]
transforming_process = [
    "oxidative hydrothermal pretreatment",
    "wet oxidation (WO)",
    "ultrafiltration using ceramic membranes",
    "liquidâliquid extraction with trioctylamine, tributylphosphate and octan-1-ol"
]
transformed_resource = ["Short-chain organic acids (SCFAs)", "acetic acid"]
```

----------

```python
import re

w2r = {"waste": [], "transforming_process": [], "transformed_resource": []}

# Assuming 'text' contains the text to be processed
text = """
        w2r = {"waste": [], "transforming_process": [], "transformed_resource": []}
        text = "Effluents derived from industrial production can contain pollutants as oils, dyes, plaguicides, emerging organic pollutants, detergents, disinfectants, and toxic metals. The presence of high concentrations of pollutants in effluents makes them an important source of environmental pollution. To solve this problem, various technologies have been developed for the treatment of industrial effluents. Currently, sustainable industrial production and the wastes reuse is of great importance for the economic development and environmental countries protection. This review initially proposes an introduction to sustainable industrial production, its foundations and aspects related to the circular economy and the process intensification. Current trends in waste reuse in Latin America are presented. In addition, the latest advances on the technologies used for effluents treatment are commented and discussed, considering the different sustainability indicators. The contributions reported in this manuscript demonstrated the efficiency of eliminating pollutants present in industrial effluents, reaching removal percentages of pollutants from 20 to 100 %. Finally, it is important to mention that the applied technologies are useful not only for the decontamination of an industrial effluent and the environmental care but also for the possibility of give an additional use to these resources considering the water shortage present in many parts of Latin America. 
        """

# Regular expressions for extracting waste, transforming_process, transformed_resource
waste_pattern = r"\b(wastes|pollutants|effluents)\b"
transforming_process_pattern = r"\b(treatment|reuse|technologies|processes|removal)\b"
transformed_resource_pattern = r"\b(resources|water|reuse)\b"

# Findall to get the keywords
waste_keywords = re.findall(waste_pattern, text)
transforming_process_keywords = re.findall(transforming_process_pattern, text)
transformed_resource_keywords = re.findall(transformed_resource_pattern, text)

# Extend lists with extracted keywords
for keyword in waste_keywords:
    w2r["waste"].append(keyword.lower())
    
for keyword in transforming_process_keywords:
    w2r["transforming_process"].extend([keyword.lower() for _ in range(3)])  # Assuming each process has three sub-processes
    
for keyword in transformed_resource_keywords:
    w2r["transformed_resource"].append(keyword.lower())

print(w2r)
```

----------

```python
w2r = {"waste": [], "transforming_process": [], "transformed_resource": []}
text = """..."""

# Extract waste
wastes = ["untreated wastewater", "carbon-neutral valorization and recycling of urban wastewater"]
for waste in wastes:
    w2r["waste"].append(waste)

# Extract transforming process
transforming_processes = [
    "a newly isolated biocrust-forming cyanobacterium Desertifilum tharense BERC-3 was evaluated",
    "highest growth and lipids productivity were achieved in urban wastewater compared to BG11 and synthetic wastewater"
]
for process in transforming_processes:
    w2r["transforming_process"].append(process)

# Extract transformed resource
transformed_resources = [
    "soil supplementation with 2% wastewater-cultivated algae as a soil amender",
    "post-treated wastewater",
    "wastewater-driven algae cultivation systems"
]
for resource in transformed_resources:
    w2r["transformed_resource"].append(resource)
```

----------

You can use regular expressions to extract the required information from the text:

```python
import re

# existing code...

w2r = {"waste": [], "transforming_process": [], "transformed_resource": []}

text = "This study has focused on the dam sediments and marble waste reuse as subgrade materials for road construction, with the overarching goals of reducing greenhouse gas emissions and conserving natural resources. Different mixtures were prepared based on sediments and marble waste, and treated with hydraulic binders. The first mixture consisted solely of raw sediment, while the second mixture combined 50 % dredged sediments with 50 % marble waste. Additionally, this mixture was treated with 1 % aerial hydrated lime and hydraulic road binder to enhance its properties. The experimental study focused on assessing both the short-term and long-term mechanical properties of the prepared mixtures. Results highlighted that the mixtures containing dam sediments and marble waste were highly suitable for road subgrade construction. These mixtures satisfied the criteria for trafficability (UCS), wetting resistance (UCSI), freezing resistance (ITS), and overall mechanical strength. Furthermore, a comprehensive analysis of the mixtures' microstructure and their environmental impact was conducted. A significant relationship was observed between CaO/SiO2 ratio and the mechanical properties of the treated mix. The research contributes to the growing body of knowledge regarding sustainable construction practices by highlighting the viability of utilizing dredged sediments and marble waste as valuable resources in road subgrade construction. The study showed that recovering 20 % of sediment and marble waste to replace natural materials would reduce energy consumption and greenhouse gas emissions by at least 40 % and 28 % respectively. 2023 The Authors"

# Extracting information from the text
w2r["waste"].append(re.search(r'(\w+) (\w+) sediments', text).group(1) + " " + re.search(r'(\w+) (\w+) waste', text).group(1))
w2r["transforming_process"].append("mixtures were prepared based on sediments and marble waste, and treated with hydraulic binders")
w2r["transformed_resource"].append("road subgrade construction")

print(w2r)
```

This will output:

```python
{
    'waste': ['sediment', 'marble waste'],
    'transforming_process': ["mixtures were prepared based on sediments and marble waste, and treated with hydraulic binders"],
    'transformed_resource': ["road subgrade construction"]
}
```

----------

```python
waste = ["pollution", "NO3â"]
transforming_process = ["alkaline electrocatalytic NO3â reduction reaction (NO3RR)", 
                        "halogen-mediated H+ feeding strategy", 
                        "*NO intermediate hydrogenation"]
transformed_resource = ["sustainable ammonia (NH3) synthesis", 
                         "high-purity NH4Cl", 
                         "ammonia products"]
```

----------

```python
# Define dictionary to store extracted information
w2r = {"waste": [], "transforming_process": [], "transformed_resource": []}

# Extract relevant text from original text and add it to w2r dictionary
w2r["waste"].append("municipal solid waste (MSW), combustible fraction")
w2r["waste"].append("<4 mm soil-like material>")

w2r["transforming_process"].append("landfill mining, incineration of combustible fraction")

w2r["transformed_resource"].append("energy generation potential: 1125 kWh of electrical energy")
```

----------

Here's the updated code:
```python
w2r = {"waste": [], "transforming_process": [], "transformed_resource": []}
text = "..."  # previous text...

# Added code to extract waste, transforming_process, transformed_resource
w2r["waste"].append("salt-slag/salt-cake hazardous wastes")
w2r["transforming_process"].append("recycling aluminium in rotary furnaces")
w2r["transformed_resource"].extend([
    "valuable alloys",
    "aluminium concentrates",
    "ammonium sulphate",
    "non-metallic compounds (NMCs)",
    "secondary cast aluminium alloys"
])
```

----------

Here's the completed code:
```python
w2r = {"waste": [], "transforming_process": [], "transformed_resource": []}
text = """
        w2r = {"waste": [], "transforming_process": [], "transformed_resource": []}
        text = "The increasing global waste generated by industrial activities poses significant environmental challenges. Eco-waste management emerges as an economically viable solution for converting, valorizing, and repurposing these byproducts, aligning with circular economy principles, and aiming to reduce greenhouse gas emissions. Construction, known for its unsustainability due to high energy consumption, non-renewable resource utilization, waste generation, and greenhouse gas emissions, particularly from cement production, has led to the exploration of alternative materials. Magnesium oxide (MgO)-based cement, an alternative to Ordinary Portland Cement (OPC), has gained attention, leveraging Brazil's prominence as a major magnesite producer. This study explores the valorization of waste from kraft pulp mills of the paper industry, specifically lime sludge (LS) and lime slaker grits (grits), to produce magnesium oxysulfate (MOS)-based fiber cement boards. The effect of accelerated carbonation on cementitious composites produced with formulations containing grits and LS was investigated. Replacing 25% of the limestone with grits showed no noticeable differences in the properties of the boards, and MOR values close to 11.17 MPa were obtained. However, the physical-mechanical performance showed a decrease with the use of LS and higher concentrations of grits, associated with Na2SO4.XH2O formation in the system and ITZ structure formed around the aggregated particle, respectively. Carbonation in a saturated atmosphere led to the carbonation of the 5â1â7 phase, which was related to the decrease in mechanical strength of the boards after the curing process. The thermal decomposition of the Hydrated Magnesium Carbonates (HMCs) formed during accelerated carbonation corroborated with the changes in the physical properties of the composites, demonstrating that the carbonation products are formed within the voids and pores of the material and contribute to the reduction in water absorption of the boards. 
        """

waste_keywords = ["lime sludge", "lime slaker grits"]
transforming_process_keywords = ["valorization", "accelerated carbonation"]
transformed_resource_keywords = ["magnesium oxysulfate-based fiber cement boards"]

import re

for keyword in waste_keywords:
    w2r["waste"].extend(re.findall(r'\b' + keyword + r'\b', text))

for keyword in transforming_process_keywords:
    w2r["transforming_process"].extend(re.findall(r'\b' + keyword + r'\b', text))

for keyword in transformed_resource_keywords:
    w2r["transformed_resource"].extend(re.findall(r'\b' + keyword + r'\b', text))
```

----------

```python
waste = ["carrot pulp waste (CPW)", "CO2", "N2"]
transforming_process = ["pyrolysis process", "single-stage pyrolysis", "multi-stage pyrolysis", "oxidative thermal cracking", "homogeneous reactions initiated by CO2"]
transformed_resource = ["syngas generation", "bio-oil production", "CO formation", "VOCs produced during the pyrolysis of CPW"]

w2r = {"waste": waste, "transforming_process": transforming_process, "transformed_resource": transformed_resource}
```

----------

```python
import re

# ...

w2r = {"waste": [], "transforming_process": [], "transformed_resource": []}

# ...

text = """
    ...
"""

def extract_info(text):
    global w2r
    
    # Extract waste
    waste_pattern = r"feedstocks|refractory polymers|organic matter"
    waste_matches = re.findall(waste_pattern, text)
    w2r["waste"] = list(set(waste_matches))  # Convert to set to remove duplicates
    
    # Extract transforming_process
    transforming_process_pattern = r"anaerobic digestion|co-digestion|biogas and CH4 production"
    transforming_process_matches = re.findall(transforming_process_pattern, text)
    w2r["transforming_process"] = list(set(transforming_process_matches))  # Convert to set to remove duplicates
    
    # Extract transformed_resource
    transformed_resource_pattern = r"biogas|CH4 production|methane energy yields"
    transformed_resource_matches = re.findall(transformed_resource_pattern, text)
    w2r["transformed_resource"] = list(set(transformed_resource_matches))  # Convert to set to remove duplicates
    
extract_info(text)
print(w2r)
```

----------

```python
# ... (rest of your code)

w2r = {"waste": [], "transforming_process": [], "transformed_resource": []}

text = "The global drive towards sustainable development has prompted a notable shift in civil engineering practices towards utilizing secondary materials, such as incineration bottom ash (IBA). The literature review underscores the relevance of waste incineration and the crucial need for effective IBA management strategies. Existing studies, however, reveal a dearth of studies within the life cycle assessment (LCA) framework focusing on understanding IBA characteristics and field conditions. The study addresses this gap by proposing an LCA to assess the environmental implications of substituting natural aggregates with IBA in pavement layers. A comparative LCA was carried out, where different scenarios of reuse of IBA (as produced, treated, or with restrictions) were assessed against a baseline scenario that represents the conventional use of aggregates in roads and landfilling of IBA. The ReCiPe technique, incorporating a hierarchist perspective, was employed to assess impacts across different problem-oriented categories. Additionally, this study also explores the impact of data variability on LCA outcomes, considering changes in landfill height, pavement infiltration rate, time duration, and IBA transportation distance. The analysis indicates that incorporating IBA in road layers can significantly reduce impacts on non-toxic categories like global warming by over 35 %. However, the leaching properties of untreated IBA contribute to a more than 28 % increase in human carcinogenic toxicity, rendering it environmentally unsuitable for road layer reuse. The comparative study illustrated that reusing treated IBA is the most sustainable approach, remaining effective up to a distance of d + 15 km. In cases where treatment is not feasible, utilizing IBA with restrictions is recommended up to a distance of d + 5 km (d represents the transportation distance for natural materials). This research fills a critical gap in the literature by providing a framework to assess IBA reuse in road construction, thereby advancing the discourse on sustainable materials management in the construction industry. "

# Extract keywords
import re

def extract_keywords(text):
    waste = [word.strip() for word in re.findall(r'\b(waste|waste incineration|incineration bottom ash)\b', text)]
    transforming_process = [word.strip() for word in re.findall(r'\b(life cycle assessment|LCA|comparative LCA|ReCiPe technique)\b', text)]
    transformed_resource = [word.strip() for word in re.findall(r'\b(incineration bottom ash|IBA|natural aggregates|pavement layers|road layer reuse|treated IBA|IBA with restrictions)\b', text)]

    return waste, transforming_process, transformed_resource

waste, transforming_process, transformed_resource = extract_keywords(text)

# Update the dictionary
for key in w2r:
    if key == "waste":
        w2r[key] = waste
    elif key == "transforming_process":
        w2r[key] = transforming_process
    else:
        w2r[key] = transformed_resource

print(w2r)
```

----------

